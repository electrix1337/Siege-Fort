//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/inputAsset/ingameAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IngameAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IngameAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ingameAsset"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""7ba1896e-947f-4b29-96d7-e70cda0c6c12"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3916aadd-dbbe-4f7e-a221-91323d067b88"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpeedCamera"",
                    ""type"": ""Button"",
                    ""id"": ""4bfb6e6d-3f92-48a4-b4b3-cdd24bd0348a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""209634f2-22f8-46db-bd93-22a4946388aa"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b109529c-0293-4ec1-afb0-2c53ce6837af"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""805f85bf-07d7-458c-9287-e16f8252a242"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""161a516b-82eb-432c-ac1b-faf40287e4a8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""80e0e873-75de-4feb-86a2-d2956b8be987"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""784824a0-358b-45bb-ac50-2d50c0630959"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shortcut"",
            ""id"": ""8f49b1ab-79c6-4a7d-9300-f2a01e7f0fe3"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""32e7e726-a62e-4d78-afdd-696e83da01fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""60db5c5b-a3b6-450b-872f-536ea00e6b66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""285ca48e-6af4-4d0d-87e7-2f1511216641"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""108ebecd-6c2d-48a2-bcbd-f3475fcf5f31"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Move = m_Camera.FindAction("Move", throwIfNotFound: true);
        m_Camera_SpeedCamera = m_Camera.FindAction("SpeedCamera", throwIfNotFound: true);
        // Shortcut
        m_Shortcut = asset.FindActionMap("Shortcut", throwIfNotFound: true);
        m_Shortcut_Click = m_Shortcut.FindAction("Click", throwIfNotFound: true);
        m_Shortcut_Cancel = m_Shortcut.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Move;
    private readonly InputAction m_Camera_SpeedCamera;
    public struct CameraActions
    {
        private @IngameAsset m_Wrapper;
        public CameraActions(@IngameAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Camera_Move;
        public InputAction @SpeedCamera => m_Wrapper.m_Camera_SpeedCamera;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @SpeedCamera.started += instance.OnSpeedCamera;
            @SpeedCamera.performed += instance.OnSpeedCamera;
            @SpeedCamera.canceled += instance.OnSpeedCamera;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @SpeedCamera.started -= instance.OnSpeedCamera;
            @SpeedCamera.performed -= instance.OnSpeedCamera;
            @SpeedCamera.canceled -= instance.OnSpeedCamera;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Shortcut
    private readonly InputActionMap m_Shortcut;
    private List<IShortcutActions> m_ShortcutActionsCallbackInterfaces = new List<IShortcutActions>();
    private readonly InputAction m_Shortcut_Click;
    private readonly InputAction m_Shortcut_Cancel;
    public struct ShortcutActions
    {
        private @IngameAsset m_Wrapper;
        public ShortcutActions(@IngameAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Shortcut_Click;
        public InputAction @Cancel => m_Wrapper.m_Shortcut_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_Shortcut; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShortcutActions set) { return set.Get(); }
        public void AddCallbacks(IShortcutActions instance)
        {
            if (instance == null || m_Wrapper.m_ShortcutActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShortcutActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IShortcutActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IShortcutActions instance)
        {
            if (m_Wrapper.m_ShortcutActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShortcutActions instance)
        {
            foreach (var item in m_Wrapper.m_ShortcutActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShortcutActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShortcutActions @Shortcut => new ShortcutActions(this);
    public interface ICameraActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSpeedCamera(InputAction.CallbackContext context);
    }
    public interface IShortcutActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
